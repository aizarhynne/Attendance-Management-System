/*
Deployment script for AttendanceSystemDB

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "AttendanceSystemDB"
:setvar DefaultFilePrefix "AttendanceSystemDB"
:setvar DefaultDataPath "C:\Users\aizar\AppData\Local\Microsoft\VisualStudio\SSDT\Attendance Management System"
:setvar DefaultLogPath "C:\Users\aizar\AppData\Local\Microsoft\VisualStudio\SSDT\Attendance Management System"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [$(DatabaseName)];


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ARITHABORT ON,
                CONCAT_NULL_YIELDS_NULL ON,
                CURSOR_DEFAULT LOCAL 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET PAGE_VERIFY NONE,
                DISABLE_BROKER 
            WITH ROLLBACK IMMEDIATE;
    END


GO
ALTER DATABASE [$(DatabaseName)]
    SET TARGET_RECOVERY_TIME = 0 SECONDS 
    WITH ROLLBACK IMMEDIATE;


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET QUERY_STORE (QUERY_CAPTURE_MODE = ALL, CLEANUP_POLICY = (STALE_QUERY_THRESHOLD_DAYS = 367), MAX_STORAGE_SIZE_MB = 100) 
            WITH ROLLBACK IMMEDIATE;
    END


GO
PRINT N'Creating Table [dbo].[Admin]...';


GO
CREATE TABLE [dbo].[Admin] (
    [admin_id]   INT           IDENTITY (1, 1) NOT NULL,
    [admin_name] VARCHAR (100) NOT NULL,
    [email]      VARCHAR (100) NOT NULL,
    [password]   VARCHAR (100) NOT NULL,
    [created_at] DATETIME      NULL,
    PRIMARY KEY CLUSTERED ([admin_id] ASC),
    UNIQUE NONCLUSTERED ([email] ASC)
);


GO
PRINT N'Creating Table [dbo].[Attendance]...';


GO
CREATE TABLE [dbo].[Attendance] (
    [attendance_id] INT          IDENTITY (1, 1) NOT NULL,
    [user_id]       INT          NOT NULL,
    [date]          DATE         NOT NULL,
    [time_in]       TIME (7)     NOT NULL,
    [time_out]      TIME (7)     NULL,
    [status]        VARCHAR (50) NULL,
    [created_at]    DATETIME     NULL,
    PRIMARY KEY CLUSTERED ([attendance_id] ASC)
);


GO
PRINT N'Creating Table [dbo].[Logs]...';


GO
CREATE TABLE [dbo].[Logs] (
    [log_id]    INT           IDENTITY (1, 1) NOT NULL,
    [admin_id]  INT           NOT NULL,
    [action]    VARCHAR (255) NOT NULL,
    [user_id]   INT           NULL,
    [timestamp] DATETIME      NULL,
    PRIMARY KEY CLUSTERED ([log_id] ASC)
);


GO
PRINT N'Creating Table [dbo].[Users]...';


GO
CREATE TABLE [dbo].[Users] (
    [user_id]    INT             IDENTITY (1, 1) NOT NULL,
    [first_name] VARCHAR (100)   NOT NULL,
    [last_name]  VARCHAR (100)   NOT NULL,
    [email]      VARCHAR (100)   NOT NULL,
    [department] VARCHAR (100)   NULL,
    [password]   VARCHAR (100)   NOT NULL,
    [photo]      VARBINARY (MAX) NULL,
    [created_at] DATETIME        NULL,
    [updated_at] DATETIME        NULL,
    PRIMARY KEY CLUSTERED ([user_id] ASC),
    UNIQUE NONCLUSTERED ([email] ASC)
);


GO
PRINT N'Creating Default Constraint unnamed constraint on [dbo].[Admin]...';


GO
ALTER TABLE [dbo].[Admin]
    ADD DEFAULT GETDATE() FOR [created_at];


GO
PRINT N'Creating Default Constraint unnamed constraint on [dbo].[Attendance]...';


GO
ALTER TABLE [dbo].[Attendance]
    ADD DEFAULT GETDATE() FOR [created_at];


GO
PRINT N'Creating Default Constraint unnamed constraint on [dbo].[Logs]...';


GO
ALTER TABLE [dbo].[Logs]
    ADD DEFAULT GETDATE() FOR [timestamp];


GO
PRINT N'Creating Default Constraint unnamed constraint on [dbo].[Users]...';


GO
ALTER TABLE [dbo].[Users]
    ADD DEFAULT GETDATE() FOR [created_at];


GO
PRINT N'Creating Default Constraint unnamed constraint on [dbo].[Users]...';


GO
ALTER TABLE [dbo].[Users]
    ADD DEFAULT GETDATE() FOR [updated_at];


GO
PRINT N'Creating Foreign Key unnamed constraint on [dbo].[Attendance]...';


GO
ALTER TABLE [dbo].[Attendance] WITH NOCHECK
    ADD FOREIGN KEY ([user_id]) REFERENCES [dbo].[Users] ([user_id]);


GO
PRINT N'Creating Foreign Key unnamed constraint on [dbo].[Logs]...';


GO
ALTER TABLE [dbo].[Logs] WITH NOCHECK
    ADD FOREIGN KEY ([admin_id]) REFERENCES [dbo].[Admin] ([admin_id]);


GO
PRINT N'Creating Foreign Key unnamed constraint on [dbo].[Logs]...';


GO
ALTER TABLE [dbo].[Logs] WITH NOCHECK
    ADD FOREIGN KEY ([user_id]) REFERENCES [dbo].[Users] ([user_id]);


GO
PRINT N'Creating Procedure [dbo].[UpdateAttendance]...';


GO
CREATE PROCEDURE [dbo].[UpdateAttendance]
	@attendance_id INT,
    @time_out TIME,
    @status VARCHAR(50)
AS
BEGIN
    -- Update the attendance record with the provided ID
    UPDATE Attendance
    SET time_out = @time_out,
        status = @status,
        created_at = GETDATE()
    WHERE attendance_id = @attendance_id;

    -- Optionally log this action
END;
GO
PRINT N'Checking existing data against newly created constraints';


GO
USE [$(DatabaseName)];


GO
CREATE TABLE [#__checkStatus] (
    id           INT            IDENTITY (1, 1) PRIMARY KEY CLUSTERED,
    [Schema]     NVARCHAR (256),
    [Table]      NVARCHAR (256),
    [Constraint] NVARCHAR (256)
);

SET NOCOUNT ON;

DECLARE tableconstraintnames CURSOR LOCAL FORWARD_ONLY
    FOR SELECT SCHEMA_NAME([schema_id]),
               OBJECT_NAME([parent_object_id]),
               [name],
               0
        FROM   [sys].[objects]
        WHERE  [parent_object_id] IN (OBJECT_ID(N'dbo.Attendance'), OBJECT_ID(N'dbo.Logs'))
               AND [type] IN (N'F', N'C')
                   AND [object_id] IN (SELECT [object_id]
                                       FROM   [sys].[check_constraints]
                                       WHERE  [is_not_trusted] <> 0
                                              AND [is_disabled] = 0
                                       UNION
                                       SELECT [object_id]
                                       FROM   [sys].[foreign_keys]
                                       WHERE  [is_not_trusted] <> 0
                                              AND [is_disabled] = 0);

DECLARE @schemaname AS NVARCHAR (256);

DECLARE @tablename AS NVARCHAR (256);

DECLARE @checkname AS NVARCHAR (256);

DECLARE @is_not_trusted AS INT;

DECLARE @statement AS NVARCHAR (1024);

BEGIN TRY
    OPEN tableconstraintnames;
    FETCH tableconstraintnames INTO @schemaname, @tablename, @checkname, @is_not_trusted;
    WHILE @@fetch_status = 0
        BEGIN
            PRINT N'Checking constraint: ' + @checkname + N' [' + @schemaname + N'].[' + @tablename + N']';
            SET @statement = N'ALTER TABLE [' + @schemaname + N'].[' + @tablename + N'] WITH ' + CASE @is_not_trusted WHEN 0 THEN N'CHECK' ELSE N'NOCHECK' END + N' CHECK CONSTRAINT [' + @checkname + N']';
            BEGIN TRY
                EXECUTE [sp_executesql] @statement;
            END TRY
            BEGIN CATCH
                INSERT  [#__checkStatus] ([Schema], [Table], [Constraint])
                VALUES                  (@schemaname, @tablename, @checkname);
            END CATCH
            FETCH tableconstraintnames INTO @schemaname, @tablename, @checkname, @is_not_trusted;
        END
END TRY
BEGIN CATCH
    PRINT ERROR_MESSAGE();
END CATCH

IF CURSOR_STATUS(N'LOCAL', N'tableconstraintnames') >= 0
    CLOSE tableconstraintnames;

IF CURSOR_STATUS(N'LOCAL', N'tableconstraintnames') = -1
    DEALLOCATE tableconstraintnames;

SELECT N'Constraint verification failed:' + [Schema] + N'.' + [Table] + N',' + [Constraint]
FROM   [#__checkStatus];

IF @@ROWCOUNT > 0
    BEGIN
        DROP TABLE [#__checkStatus];
        RAISERROR (N'An error occurred while verifying constraints', 16, 127);
    END

SET NOCOUNT OFF;

DROP TABLE [#__checkStatus];


GO
PRINT N'Update complete.';


GO
